[tool:pytest]
# Energy Recommendation System - Test Configuration

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=src
    --cov-report=html
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --durations=10
    --benchmark-only
    --benchmark-skip

# Markers for different test types
markers =
    unit: Unit tests for individual functions and classes
    integration: Integration tests for component interactions
    performance: Performance and load tests
    energy: Energy system validation tests
    slow: Tests that take longer to run
    lstm: LSTM model specific tests
    optimization: Optimization algorithm tests
    data: Data processing and validation tests
    production: Production deployment tests

# Minimum version requirements
minversion = 6.0

# Test timeout (in seconds)
timeout = 600

# Ignore warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:pandas.*
    ignore::UserWarning:sklearn.*
    ignore::UserWarning:torch.*
    ignore::UserWarning:matplotlib.*

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
title = Energy Recommendation System Coverage Report

[coverage:xml]
output = coverage.xml

# Benchmark configuration
[benchmark]
min_rounds = 5
max_time = 1.0
warmup = True
warmup_iterations = 1
